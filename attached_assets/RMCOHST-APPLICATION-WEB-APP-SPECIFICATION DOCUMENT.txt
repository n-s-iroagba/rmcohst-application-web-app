1. Identify Major Pages & Components
Page / View
	Key Components
	Personas
	Home Page
	• NavBar
• HeroBanner
• FeatureTiles
	Prospective Visitors
	Applicant Dashboard
	• ApplicationList
• StatusTracker
• NotificationsPanel
	Applicant
	Admin Dashboard
	• TaskList
• WorkloadChart
• Filters
	Admissions Officer
	HoA Dashboard
	• MetricsCards
• ReassignmentControls
• ReportingPanel
	Head of Admissions
	SuperAdmin Settings
	• FormBuilder
• UserMgmtTable
• RoleEditor
	Super Administrator
	________________


2. Map Components to API Endpoints
We’ll group endpoints by domain:
Authentication
* POST /api/auth/register

* POST /api/auth/login

* GET /api/auth/me

Applicant Flows
   * GET /api/applications

   * POST /api/applications

   * PUT /api/applications/:id/status

   * POST /api/applications/:id/pay-fee

   * GET /api/applications/:id/documents

   * POST /api/applications/:id/documents

Officer Flows
      * GET /api/officer/tasks

      * PUT /api/applications/:id/annotate

      * POST /api/applications/:id/message

HoA Flows
         * GET /api/hod/metrics

         * POST /api/hod/assign

         * PUT /api/applications/:id/decision

SuperAdmin Flows
            * GET /api/settings/schema

            * PUT /api/settings/schema

            * GET /api/users

            * POST /api/users

            * PUT /api/users/:id/roles

________________


3. Define Data Models (TypeScript Interfaces)
We’ll draft interfaces to drive both client props and server DTOs:
ts
CopyEdit
               1. // shared/types.ts
               2. export interface User {
               3.   id: string;
               4.   name: string;
               5.   email: string;
               6.   roles: Array<'applicant' | 'officer' | 'hod' | 'superadmin'>;
               7. }
               8.                9. export interface Application {
               10.   id: string;
               11.   applicantId: string;
               12.   status: 'Draft'|'Submitted'|'UnderReview'|'DecisionPending'|'Accepted'|'Rejected';
               13.   feePaid: boolean;
               14.   documents: Document[];
               15.   createdAt: string;
               16.   updatedAt: string;
               17. }
               18.                19. export interface Document {
               20.   id: string;
               21.   applicationId: string;
               22.   type: 'WAEC'|'BirthCert'|'FeeReceipt'|string;
               23.   url: string;
               24.   uploadedAt: string;
               25. }
               26.                27. export interface Task {
               28.   applicationId: string;
               29.   priority: number;
               30.   status: Application['status'];
               31.   assignedTo: string;
               32. }
               33.                34. export interface Metrics {
               35.   total: number;
               36.   underReview: number;
               37.   accepted: number;
               38.   byDepartment: Record<string, number>;
}


4. Theming & Layout
               * Theme: primary blue, accent red

               * Global: Tailwind config with colors.blue.* & colors.red.*

               * Layout:

                  * <MainLayout> wraps pages with NavBar & Footer

                  * <DashboardLayout> adds sidebar + KPI header




Component & API Specifications  
Version 0.1 • 2025-05-08
1. Document Control
| Item          | Details                         |
|---------------|---------------------------------|
| Document Name | Consolidated Spec Document      |
| Version       | 0.1                             |
| Date          | 2025-05-08                      |
| Author        | Nnamdi Solomon Iroagba          |
| Status        | Draft                           |
---
2. Table of Contents
1. ApplicationList  
2. DocumentUpload  
3. AccountRegistration  
4. ApplicationSubmission  
5. StatusTracker  
6. NotificationsPanel  
7. DocumentVerification  
8. DecisionNotification  
9. AcceptanceFeePayment & Upgrade  
10. AdmissionLetterAccess  
11. HomePage  
12. WorkloadChart  
13. Filters  
14. AdminDashboard  
15. TaskList  
16. MetricsCards  
17. ReassignmentControls  
18. ReportingPanel  
19. FormBuilder  
20. UserMgmtTable  
21. RoleEditor  
22. Authentication
---
3. Specifications
### 3.1 ApplicationList Component & API Specification
**Route:** `/applications`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `filterStatus?: Application['status'][]`  
- `onSelect(id: string): void`  
**State:**
- `apps: Application[]`  
- `loading: boolean`  
- `error: Error | null`  
- `filter: Application['status']`  
**API:** GET `/api/applications?status={filter}`
### 3.2 DocumentUpload Component & API Specification
**Route:** `/applications/[id]/edit`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `applicationId: string`  
- `onUploadComplete(doc: Document): void`  
**State:**
- `files: File[]`  
- `progressMap: Record<string, number>`  
- `errors: string[]`  
- `uploading: boolean`  
**API:** POST `/api/applications/{applicationId}/documents` (multipart/form-data)
### 3.3 AccountRegistration Component & API Specification
**Route:** `/register`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `onSuccess(userId: string): void`  
**State:**
- `form: { firstName: string; lastName: string; email: string; password: string; confirmPass: string }`  
- `errors: Record<string, string>`  
- `loading: boolean`  
**API:** POST `/api/auth/register`
### 3.4 ApplicationSubmission Component & API Specification
**Route:** `/applications/[id]/review`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `applicationId: string`  
- `onSubmitted(): void`  
**State:**
- `submitting: boolean`  
- `error: string | null`  
**API:** POST `/api/applications/{applicationId}/submit`
### 3.5 StatusTracker Component & API Specification
**Route:** `/applications/[id]` dashboard  
**Tech:** React + TypeScript + Next.js + SSE/SWR  
**Props:**
- `applicationId: string`  
**State:**
- `status: string`  
- `timeline: { status: string; date: string }[]`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/applications/{applicationId}/status` + SSE subscribe
### 3.6 NotificationsPanel Component & API Specification
**Global Header**  
**Tech:** React + TypeScript + Next.js + SSE  
**Props:**
- `userId: string`  
**State:**
- `notifications: Notification[]`  
- `unreadCount: number`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/notifications?userId={userId}`, PATCH `/api/notifications/{id}/read`, PATCH `/api/notifications/read-all`
### 3.7 DocumentVerification Component & API Specification
**Route:** `/admin/applications/[id]/verify-documents`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `applicationId: string`  
- `onVerified(applicationId: string): void`  
**State:**
- `docs: Document[]`  
- `verifications: Record<string, boolean>`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/applications/{applicationId}/documents`, PUT `/api/applications/{applicationId}/documents/{docId}/verify`
### 3.8 DecisionNotification Component & API Specification
**Route:** `/applications/[id]/decision`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `applicationId: string`  
- `onAction(action: 'payAcceptanceFee'): void`  
**State:**
- `decision: 'Accepted'|'Rejected'|'Pending'`  
- `details: string`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/applications/{applicationId}/decision`
### 3.9 AcceptanceFeePayment & Upgrade Component & API Specification
**Route:** `/applications/[id]/acceptance-fee`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `applicationId: string`  
- `onUpgrade(): void`  
**State:**
- `amount: number`  
- `loading: boolean`  
- `error: string | null`  
- `receiptUrl: string | null`  
**API:** POST `/api/applications/{applicationId}/acceptance-fee`, POST `/api/applications/{applicationId}/upgrade`
### 3.10 AdmissionLetterAccess Component & API Specification
**Route:** `/student/applications/[id]/letter`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `applicationId: string`  
**State:**
- `letterUrl: string | null`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/applications/{applicationId}/admission-letter`
### 3.11 HomePage Component Specification
**Route:** `/`  
**Tech:** Next.js + React + TypeScript  
**Components & Props:**
- `NavBar(logoUrl, menuItems)`  
- `HeroBanner(title, subtitle, ctaText, ctaHref, backgroundImage)`  
- `FeatureTiles(features)`  
**State:** NavBar `isOpen: boolean`  
**API:** static content
### 3.12 WorkloadChart Component & API Specification
**Location:** AdminDashboard  
**Tech:** React + TypeScript + Next.js + Recharts  
**Props:**
- `metrics: Metrics`  
**State:**
- `data: ChartData[]`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/hod/metrics`
### 3.13 Filters Component Specification
**Location:** TaskList & AdminDashboard  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `values: FiltersState`  
- `onChange(updated: FiltersState): void`  
**State:** controlled via props  
**API:** passed to parent fetch calls
### 3.14 AdminDashboard Component & API Specification
**Route:** `/admin/dashboard`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `userId: string`  
**State:**
- `tasks: Task[]`  
- `metrics: Metrics`  
- `filters: FiltersState`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/officer/tasks?userId={userId}`, GET `/api/hod/metrics`
### 3.15 TaskList Component & API Specification
**Route:** `/admin/tasks`  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `userId: string`  
**State:**
- `tasks: ApplicationSummary[]`  
- `filters: FiltersState`  
- `sortBy: 'urgency'|'date'|'department'`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/applications/assigned?userId={userId}&filters&sortBy`
### 3.16 MetricsCards Component & API Specification
**Location:** HoA Dashboard  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `metrics: Metrics`  
**State:** stateless  
**API:** consumed from `/api/hod/metrics`
### 3.17 ReassignmentControls Component & API Specification
**Location:** HoA Dashboard  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `selectedIds: string[]`  
- `onReassign(): void`  
**State:**
- `target: string`  
- `loading: boolean`  
**API:** POST `/api/hod/assign`
### 3.18 ReportingPanel Component & API Specification
**Location:** HoA Dashboard  
**Tech:** React + TypeScript + Next.js  
**Props:** none  
**State:**
- `fromDate: string`  
- `toDate: string`  
- `reportType: 'summary'|'detailed'`  
- `loading: boolean`  
**API:** GET `/api/hod/reports?from={fromDate}&to={toDate}&type={reportType}`
### 3.19 FormBuilder Component & API Specification
**Location:** SuperAdmin Settings  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `schema: FormSchema`  
- `onSave(newSchema: FormSchema): void`  
**State:**
- `schema: FormSchema`  
- `loading: boolean`  
- `error: string | null`  
**API:** GET & PUT `/api/settings/schema`
### 3.20 UserMgmtTable Component & API Specification
**Location:** SuperAdmin Settings  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `users: User[]`  
- `onRoleChange(userId: string, roles: string[]): void`  
**State:**
- `loading: boolean`  
- `error: string | null`  
**API:** GET `/api/users`, PUT `/api/users/{userId}/roles`
### 3.21 RoleEditor Component & API Specification
**Location:** UserMgmtTable rows  
**Tech:** React + TypeScript + Next.js  
**Props:**
- `userId: string`  
- `currentRoles: string[]`  
- `onSave(roles: string[]): void`  
**State:**
- `selected: string[]`  
- `loading: boolean`  
- `error: string | null`  
**API:** POST `/api/users/{userId}/roles`
### 3.22 Authentication Component & API Specification
**Components:** LoginForm, getCurrentUser  
**Tech:** React + TypeScript + Next.js  
#### LoginForm
**Props:**
- `onSuccess(): void`  
**State:**
- `email: string`  
- `password: string`  
- `loading: boolean`  
- `error: string | null`  
**API:** POST `/api/auth/login` → store JWT
#### getCurrentUser
**Function:** fetches `GET /api/auth/me` with Bearer token → returns User
---
*End of consolidated document.*